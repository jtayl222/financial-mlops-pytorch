#!/usr/bin/env python3
"""
Master script to generate all publication images
Generates high-quality diagrams for the MLOps article series
"""

import subprocess
import sys
import os
from pathlib import Path

def check_dependencies():
    """Check if required packages are installed"""
    required_packages = ['matplotlib', 'numpy', 'pandas']
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"❌ Missing required packages: {', '.join(missing_packages)}")
        print("Install them with: pip install matplotlib numpy pandas")
        return False
    
    return True

def ensure_output_directory():
    """Ensure output directory exists"""
    output_dir = Path('../images')
    output_dir.mkdir(exist_ok=True)
    return output_dir

def run_script(script_name):
    """Run a Python script and handle errors"""
    try:
        print(f"🔄 Generating {script_name}...")
        result = subprocess.run([sys.executable, script_name], 
                              capture_output=True, text=True, check=True)
        print(f"✅ {script_name} completed successfully")
        return True
    except subprocess.CalledProcessError as e:
        print(f"❌ Error running {script_name}:")
        print(f"   {e.stderr}")
        return False

def main():
    """Generate all publication images"""
    
    print("🚀 MLOps Article Series Image Generator")
    print("=" * 50)
    
    # Check dependencies
    if not check_dependencies():
        sys.exit(1)
    
    # Ensure output directory exists
    output_dir = ensure_output_directory()
    print(f"📁 Output directory: {output_dir.absolute()}")
    
    # List of scripts to run
    scripts = [
        ('generate_debugging_workflow.py', 'Systematic debugging workflow'),
        ('generate_cni_migration_timeline.py', 'CNI migration timeline'),
        ('generate_performance_comparison.py', 'Performance comparison charts'),
        ('generate_network_architecture.py', 'Network architecture diagrams'),
        ('generate_arp_debugging.py', 'ARP debugging visualizations')
    ]
    
    # Track success/failure
    successful = []
    failed = []
    
    # Run each script
    for script_name, description in scripts:
        print(f"\n📊 {description}")
        print("-" * 30)
        
        if run_script(script_name):
            successful.append((script_name, description))
        else:
            failed.append((script_name, description))
    
    # Summary
    print("\n" + "=" * 50)
    print("📈 GENERATION SUMMARY")
    print("=" * 50)
    
    if successful:
        print(f"✅ Successfully generated {len(successful)} image sets:")
        for script, desc in successful:
            print(f"   • {desc}")
    
    if failed:
        print(f"\n❌ Failed to generate {len(failed)} image sets:")
        for script, desc in failed:
            print(f"   • {desc} ({script})")
    
    # Generated files summary
    image_dir = Path('../images')
    if image_dir.exists():
        png_files = list(image_dir.glob('*.png'))
        print(f"\n📸 Total images in output directory: {len(png_files)}")
        
        # Show new images generated by our scripts
        our_images = [
            'debugging_workflow_systematic.png',
            'cni_migration_timeline_strategy.png', 
            'calico_vs_cilium_performance_comparison.png',
            'calico_production_impact_timeline.png',
            'cilium_ebpf_vs_traditional_cni.png',
            'network_policy_flannel_vs_calico.png',
            'arp_debugging_tcpdump_analysis.png',
            'kubectl_logs_debugging_resolution.png'
        ]
        
        print("\n🎯 Generated strategic images:")
        for img in our_images:
            img_path = image_dir / img
            if img_path.exists():
                size_kb = img_path.stat().st_size // 1024
                print(f"   ✅ {img} ({size_kb} KB)")
            else:
                print(f"   ❌ {img} (not found)")
    
    # Usage instructions
    print("\n" + "=" * 50)
    print("📖 USAGE INSTRUCTIONS")
    print("=" * 50)
    print("""
    The generated images are ready for publication:
    
    📋 Integration Steps:
    1. Images are saved in ../images/ directory
    2. Articles already reference these images
    3. No additional changes needed
    
    🔧 Image Specifications:
    • Resolution: 300 DPI (publication quality)
    • Format: PNG with transparency
    • Optimization: Web and print ready
    
    🎨 Generated Image Types:
    • Workflow diagrams (systematic debugging)
    • Timeline visualizations (migration strategy)
    • Performance charts (CNI comparisons)
    • Architecture diagrams (eBPF vs traditional)
    • Debugging sessions (authentic terminal output)
    
    📝 Article Integration:
    • Part 6: debugging_workflow_systematic.png
    • Part 7: cni_migration_timeline_strategy.png  
    • Part 8: arp_debugging_tcpdump_analysis.png
    • Part 9: calico_vs_cilium_performance_comparison.png
    
    ✨ Ready for publication!
    """)

if __name__ == "__main__":
    main()